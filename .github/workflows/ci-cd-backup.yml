name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: gcr.io
  IMAGE_NAME: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: decigenie_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies - Frontend
      working-directory: ./frontend
      run: |
        npm ci --prefer-offline --no-audit
        echo "Frontend dependencies installed successfully"

    - name: Run tests - Frontend
      working-directory: ./frontend
      run: |
        npm test -- --coverage --watchAll=false --passWithNoTests --verbose
      env:
        CI: true
        REACT_APP_API_URL: http://localhost:8000

    - name: Install dependencies - LLM Query Service
      working-directory: ./llm-query-service
      run: |
        npm ci --prefer-offline --no-audit
        echo "LLM Query Service dependencies installed successfully"

    - name: Run tests - LLM Query Service
      working-directory: ./llm-query-service
      run: |
        npm test -- --passWithNoTests --verbose --detectOpenHandles --forceExit
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:password@localhost:5432/decigenie_test

    - name: Install dependencies - Document Ingestion Service
      working-directory: ./document-ingestion
      run: |
        npm ci --prefer-offline --no-audit
        echo "Document Ingestion Service dependencies installed successfully"

    - name: Run tests - Document Ingestion Service
      working-directory: ./document-ingestion
      run: |
        npm test -- --passWithNoTests --verbose --detectOpenHandles --forceExit
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:password@localhost:5432/decigenie_test

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker --quiet

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-frontend:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build and push LLM Query Service image
      uses: docker/build-push-action@v5
      with:
        context: ./llm-query-service
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-llm-query-service:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-llm-query-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build and push Document Ingestion Service image
      uses: docker/build-push-action@v5
      with:
        context: ./document-ingestion
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-document-ingestion:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-document-ingestion:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials decigenie-cluster \
          --zone ${{ secrets.GCP_ZONE }} \
          --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Update Kubernetes manifests with new image tags
      run: |
        # Update image tags in deployment files
        find k8s/ -name "*-deployment.yaml" -exec sed -i "s|gcr.io/${{ secrets.GCP_PROJECT_ID }}/decigenie-.*:.*|gcr.io/${{ secrets.GCP_PROJECT_ID }}/decigenie-frontend:${{ github.sha }}|g" {} \;
        echo "Updated deployment manifests with new image tags"

    - name: Deploy to GKE
      run: |
        echo "Deploying to Kubernetes..."
        # Apply namespace first
        if [ -f "k8s/namespace.yaml" ]; then
          kubectl apply -f k8s/namespace.yaml
        fi
        
        # Apply secrets and configmaps
        if [ -f "k8s/secret.yaml" ]; then
          kubectl apply -f k8s/secret.yaml
        fi
        if [ -f "k8s/configmap.yaml" ]; then
          kubectl apply -f k8s/configmap.yaml
        fi
        
        # Apply PVC
        if [ -f "k8s/uploads-pvc.yaml" ]; then
          kubectl apply -f k8s/uploads-pvc.yaml
        fi
        
        # Apply deployments
        for deployment in k8s/*-deployment.yaml; do
          if [ -f "$deployment" ]; then
            kubectl apply -f "$deployment"
          fi
        done
        
        # Apply services
        for service in k8s/*-service.yaml; do
          if [ -f "$service" ]; then
            kubectl apply -f "$service"
          fi
        done
        
        # Apply ingress last
        if [ -f "k8s/ingress.yaml" ]; then
          kubectl apply -f k8s/ingress.yaml
        fi

    - name: Wait for deployment to be ready
      run: |
        echo "Waiting for deployments to be ready..."
        kubectl rollout status deployment/frontend-deployment -n decigenie --timeout=300s || echo "Frontend deployment status check failed"
        kubectl rollout status deployment/llm-query-service-deployment -n decigenie --timeout=300s || echo "LLM Query Service deployment status check failed"
        kubectl rollout status deployment/document-ingestion-deployment -n decigenie --timeout=300s || echo "Document Ingestion Service deployment status check failed"

    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        echo "=== Pods ==="
        kubectl get pods -n decigenie -o wide || echo "No pods found in decigenie namespace"
        echo "=== Services ==="
        kubectl get services -n decigenie || echo "No services found in decigenie namespace"
        echo "=== Ingress ==="
        kubectl get ingress -n decigenie || echo "No ingress found in decigenie namespace"
        
        # Check pod logs for any errors
        echo "=== Recent Pod Logs ==="
        for pod in $(kubectl get pods -n decigenie -o jsonpath='{.items[*].metadata.name}'); do
          echo "Logs for $pod:"
          kubectl logs $pod -n decigenie --tail=20 || echo "Could not get logs for $pod"
        done 