name: Build and Deploy Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Build Frontend
      working-directory: ./frontend
      run: |
        echo "Building frontend..."
        npm install
        npm run build
        echo "✓ Frontend build completed successfully"

    - name: Build Backend Services
      run: |
        echo "Building backend services..."
        cd llm-query-service && npm install && echo "✓ LLM service dependencies installed"
        cd ../document-ingestion && npm install && echo "✓ Document ingestion dependencies installed"
        echo "✓ Backend services build completed successfully"

    - name: Test Docker Builds
      run: |
        echo "Testing Docker builds..."
        cd frontend && docker build --dry-run . && echo "✓ Frontend Docker build test passed"
        cd ../llm-query-service && docker build --dry-run . && echo "✓ LLM service Docker build test passed"
        cd ../document-ingestion && docker build --dry-run . && echo "✓ Document ingestion Docker build test passed"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and Push Docker Images
      run: |
        echo "Building and pushing Docker images..."
        
        # Build and push frontend
        cd frontend
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/decigenie-frontend:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/decigenie-frontend:${{ github.sha }}
        echo "✓ Frontend image pushed"
        
        # Build and push LLM service
        cd ../llm-query-service
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/decigenie-llm-service:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/decigenie-llm-service:${{ github.sha }}
        echo "✓ LLM service image pushed"
        
        # Build and push document ingestion service
        cd ../document-ingestion
        docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/decigenie-document-service:${{ github.sha }} .
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/decigenie-document-service:${{ github.sha }}
        echo "✓ Document ingestion service image pushed"

    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to Kubernetes..."
        gcloud container clusters get-credentials decigenie-cluster --zone=${{ secrets.GCP_ZONE }} --project=${{ secrets.GCP_PROJECT_ID }}
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/uploads-pvc.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl apply -f k8s/llm-query-service-deployment.yaml
        kubectl apply -f k8s/document-ingestion-deployment.yaml
        kubectl apply -f k8s/postgres-deployment.yaml
        kubectl apply -f k8s/ingress.yaml
        
        echo "✓ Kubernetes deployment completed"
        
        # Wait for deployments to be ready
        kubectl rollout status deployment/frontend-deployment -n decigenie
        kubectl rollout status deployment/llm-query-service-deployment -n decigenie
        kubectl rollout status deployment/document-ingestion-deployment -n decigenie
        
        echo "✓ All deployments are ready"
        
        # Show deployment status
        kubectl get pods -n decigenie
        kubectl get services -n decigenie
        kubectl get ingress -n decigenie 