name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: gcr.io
  IMAGE_NAME: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: decigenie_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies - Frontend
      working-directory: ./frontend
      run: npm ci

    - name: Run tests - Frontend
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Install dependencies - LLM Query Service
      working-directory: ./llm-query-service
      run: npm ci

    - name: Run tests - LLM Query Service
      working-directory: ./llm-query-service
      run: npm test

    - name: Install dependencies - Document Ingestion Service
      working-directory: ./document-ingestion
      run: npm ci

    - name: Run tests - Document Ingestion Service
      working-directory: ./document-ingestion
      run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push LLM Query Service image
      uses: docker/build-push-action@v4
      with:
        context: ./llm-query-service
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-llm-query-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Document Ingestion Service image
      uses: docker/build-push-action@v4
      with:
        context: ./document-ingestion
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-document-ingestion:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials decigenie-cluster \
          --zone ${{ secrets.GCP_ZONE }} \
          --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Update Kubernetes manifests
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|gcr.io/PROJECT_ID/decigenie-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-frontend:${{ github.sha }}|g" k8s/frontend-deployment.yaml
        sed -i "s|gcr.io/PROJECT_ID/decigenie-llm-query-service:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-llm-query-service:${{ github.sha }}|g" k8s/llm-query-service-deployment.yaml
        sed -i "s|gcr.io/PROJECT_ID/decigenie-document-ingestion:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/decigenie-document-ingestion:${{ github.sha }}|g" k8s/document-ingestion-deployment.yaml

    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
        kubectl apply -f k8s/llm-query-service-deployment.yaml
        kubectl apply -f k8s/document-ingestion-deployment.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/frontend -n decigenie --timeout=300s
        kubectl rollout status deployment/llm-query-service -n decigenie --timeout=300s
        kubectl rollout status deployment/document-ingestion -n decigenie --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n decigenie
        kubectl get services -n decigenie
        kubectl get ingress -n decigenie 