apiVersion: v1
kind: ConfigMap
metadata:
  name: decigenie-config
  namespace: decigenie
data:
  NODE_ENV: "production"
  FRONTEND_PORT: "3000"
  LLM_QUERY_SERVICE_PORT: "8000"
  DOCUMENT_INGESTION_PORT: "8001"
  UPLOAD_DIR: "/app/uploads"
  MAX_FILE_SIZE: "50MB" 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: document-ingestion
  namespace: decigenie
  labels:
    app: document-ingestion
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: document-ingestion
  template:
    metadata:
      labels:
        app: document-ingestion
        component: backend
    spec:
      containers:
      - name: document-ingestion
        image: gcr.io/decigenie-llm/decigenie-document-service:latest
        ports:
        - containerPort: 8001
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: decigenie-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: decigenie-config
              key: DOCUMENT_INGESTION_PORT
        - name: UPLOAD_DIR
          valueFrom:
            configMapKeyRef:
              name: decigenie-config
              key: UPLOAD_DIR
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: decigenie-secrets
              key: DATABASE_URL
        volumeMounts:
        - name: uploads-volume
          mountPath: /app/uploads
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: uploads-volume
        persistentVolumeClaim:
          claimName: uploads-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: document-ingestion
  namespace: decigenie
  labels:
    app: document-ingestion
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
    protocol: TCP
  selector:
    app: document-ingestion
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-pvc
  namespace: decigenie
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: decigenie
  labels:
    app: frontend
    component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        component: frontend
    spec:
      containers:
      - name: frontend
        image: gcr.io/decigenie-llm/decigenie-frontend:latest
        ports:
        - containerPort: 3000
        env:
        - name: REACT_APP_API_URL
          value: "http://llm-query-service:8000"
        - name: REACT_APP_DOCUMENT_SERVICE_URL
          value: "http://document-ingestion:8001"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: decigenie
  labels:
    app: frontend
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
  selector:
    app: frontend 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: decigenie-ingress
  namespace: decigenie
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "decigenie-ip"
    networking.gke.io/managed-certificates: "decigenie-cert"
    kubernetes.io/ingress.allow-http: "false"
spec:
  rules:
  - host: decigenie.your-domain.com  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 80
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: llm-query-service
            port:
              number: 8000
      - path: /document-api/
        pathType: Prefix
        backend:
          service:
            name: document-ingestion
            port:
              number: 8001
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: decigenie-cert
  namespace: decigenie
spec:
  domains:
  - decigenie.your-domain.com  # Replace with your domain 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: llm-query-service
  namespace: decigenie
  labels:
    app: llm-query-service
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: llm-query-service
  template:
    metadata:
      labels:
        app: llm-query-service
        component: backend
    spec:
      containers:
      - name: llm-query-service
        image: gcr.io/decigenie-llm/decigenie-llm-service:latest
        ports:
        - containerPort: 8000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: decigenie-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: decigenie-config
              key: LLM_QUERY_SERVICE_PORT
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: decigenie-secrets
              key: GEMINI_API_KEY
        - name: DATABASE_PATH
          value: "/app/data/decigenie.db"
        volumeMounts:
        - name: llm-data
          mountPath: /app/data
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: llm-data
        persistentVolumeClaim:
          claimName: llm-data-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: llm-data-pvc
  namespace: decigenie
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: llm-query-service
  namespace: decigenie
  labels:
    app: llm-query-service
    component: backend
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: llm-query-service 
apiVersion: v1
kind: Namespace
metadata:
  name: decigenie
  labels:
    name: decigenie
    app: decigenie-llm 
apiVersion: v1
kind: Secret
metadata:
  name: decigenie-secrets
  namespace: decigenie
type: Opaque
data:
  # Base64 encoded values - replace with your actual values
  GEMINI_API_KEY: <base64-encoded-gemini-api-key>
  DATABASE_URL: <base64-encoded-database-url>
  POSTGRES_PASSWORD: <base64-encoded-db-password> 